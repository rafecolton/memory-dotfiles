#!/usr/bin/env ruby

$:.unshift File.expand_path("#{ENV['MDF_VAR_PATH'] || '/usr/local/var/mdf'}/lib")

require 'helper_functions'
require 'git_commands'

class MemoryDotfiles
  include HelperFunctions
  include GitCommands

  attr_reader :args, :bin_path, :command
  attr_reader :git_dir, :git_remote, :git_work_tree
  attr_reader :profile_dir, :var_path

  def initialize(command = 'usage', args)
    # initializes command-related args
    @command = command.to_sym
    @args = args.freeze

    # initializes mdf path-related variables
    @bin_path = ENV['MDF_BIN_PATH'] || '/usr/local/bin'
    @var_path = ENV['MDF_VAR_PATH'] || '/usr/local/var/mdf'
    @profile_dir = "#{@var_path}/profiles"

    # initializes git-related variables
    @git_remote = "#{@var_path}/.gitremote"
    @git_dir = "#{@var_path}/.git"
    @git_work_tree = ENV['MDF_WORK_TREE'] || ENV['HOME']

    git_init_all unless @command == :uninstall
  end

  def run
    unless valid_commands.include?(command) && respond_to?(command)
      $stderr.puts %Q(#{RED}Invalid command `#{command.to_s}`#{RESET})
      usage
      exit 1
    end
    send(command)
  end

  def list(printit = true)
    list = Dir["#{@profile_dir}/*/"].map{ |dir| File.basename(dir) }
    if printit
      formatted_list = list.map{ |i| "- #{i}" }
      [
        "\nProfiles",
        '========',
        formatted_list,
        "\n"
      ].each{ |i| puts i }
    end
    list
  end

  def use
  end

  def restore
  end

  def usage
    puts 'This is how you use `mdf`'
  end
  alias_method :'-h', :usage
  alias_method :'--help', :usage

  def uninstall
    puts "uninstalling mdf..."

    shell_out <<-EOB
      if [ -f #{@bin_path}/mdf ] ; then
        rm #{@bin_path}/mdf
      fi

      if [ -d #{@var_path} ] ; then
        rm -rf #{@var_path}
      fi
    EOB

    puts "...done"
  end
end

if $0 == __FILE__
  command = ARGV.shift

  MemoryDotfiles.new(command, ARGV.clone).run
end
