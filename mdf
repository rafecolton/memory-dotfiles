#!/usr/bin/env ruby
# vim:fileencoding=utf-8

$: << File.expand_path("#{ENV['MDF_VAR_PATH'] || '/usr/local/var/mdf'}/lib")

require 'fileutils'
require 'helper_functions'

class MemoryDotfiles
  include HelperFunctions
  attr_reader :args, :bin_path, :command, :git_dir, :git_work_tree, :var_path

  def initialize(command = 'usage', args)
    @var_path = ENV['MDF_VAR_PATH'] || '/usr/local/var/mdf'
    @bin_path = ENV['MDF_BIN_PATH'] || '/usr/local/bin'
    ENV['GIT_DIR'] = @git_dir = "#{@var_path}/.git"
    ENV['GIT_WORK_TREE'] = @git_work_tree = (ENV['MDF_WORK_TREE'] || ENV['HOME'])
    @command = command.to_sym
    @args = args
    git_init unless @command == :uninstall
  end

  def run
    unless respond_to?(command)
      $stderr.puts %Q(#{RED}Invalid command `#{command}`#{RESET})
      usage
      exit 1
    end
    send(command)
  end

  def git_init
    unless File.exists?(git_dir) && File.directory?(git_dir)
      FileUtils.mkdir_p(git_dir)
      shell_out 'git init'
    end
  end

  def usage
    puts 'This is how you use `mdf`'
  end
  alias_method :'-h', :usage
  alias_method :'--help', :usage

  def uninstall
    puts "uninstalling mdf..."

    shell_out <<-EOB
    if [ -f #{@bin_path}/mdf ] ; then
      rm #{@bin_path}/mdf
    fi

    if [ -d #{@var_path} ] ; then
      rm -rf #{@var_path}
    fi
    EOB

    puts "...done"
  end
end

if $0 == __FILE__
  command = ARGV.shift.to_sym

  MemoryDotfiles.new(command, ARGV.clone).run
end

# vim:filetype=ruby
