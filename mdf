#!/usr/bin/env bash

VERSION='0.1.0'
LIB="$MDF_VAR_PATH/lib"
BIN_PATH="$MDF_BIN_PATH"
VAR_PATH="$MDF_VAR_PATH"
PROFILE_DIR="$VAR_PATH/profiles"
GIT_REMOTE="$VAR_PATH/.gitremote"
GIT_DIR="$VAR_PATH/.git"
GIT_WORK_TREE="$MDF_WORK_TREE"

for file in $(find "$LIB" -type f -name '*.bash') ; do
  source $file
done

usage() {
  cat <<EOB

  Usage: mdf <comand> [options]

  Command list:
  <usage | --help | -h>   : display this message
  <list>                  : list available profiles
  <restore>               : restore working tree to original state
  <uninstall>             : uninstall mdf entirely
  <use>                   : deploy a selected dotfile set
  <version | --verison>   : print version number and exit

  You can also type \`mdf help <command>\` to learn more about a particular command.

  Happy coding!
EOB
}

list() {
  echo -e "\nProfiles\n========"
  find "$PROFILE_DIR" -mindepth 1 -maxdepth 1 -type d -exec basename {} \;
}

uninstall() {
  echo 'uninstalling mdf...'
  if [ "$1" == '--clean' ] || [ "$1" == "-c" ] ; then restore ; fi
  quietly "if [ -f \"$BIN_PATH/mdf\" ] ; then rm \"$BIN_PATH/mdf\" ; fi"
  quietly "if [ -d \"$VAR_PATH\" ] ; then rm -rf \"$VAR_PATH\" ; fi"
  echo 'done'
}

restore() {
  quietly "$GIT reset -q --hard"
  quietly "$GIT checkout -q master"
}

use() {
  # profile must be specified
  if [ -z $1 ] ; then
    echoerr 'You must specify a profile to use'
    exit 2
  fi
  local profile="$1"

  # Determine if a branch already exists for the profile.
  # If not, then there must be a valid directory for the
  # profile.
  local has_profile=1
  if git_remote_branches_includes_profile "$profile" ; then
    has_profile=0
  elif [ ! -e "$PROFILE_DIR/$profile" ] ; then
    echoerr 'You must specify a valid profile to use'
  fi

  # restore original home directory first
  restore
  if [ $profile == 'master' ] ; then return 0 ; fi

  # `git add`, `git commit`, and `git push` for
  # original home directory
  quietly "git_add_profile_contents \"$profile\""
  quietly "git_commit_push 'master'"

  # either check out a new branch or, if a branch already
  # exists for the selected profile, check it out instead
  if [ $has_profile -eq 0 ] ; then
    quietly "eval \"$GIT checkout -q '$profile'\""
  else
    quietly "eval \"$GIT checkout -q -b '$profile'\""
  fi

  # copy profile contents into git work tree
  rsync -aqz --safe-links "$PROFILE_DIR/$profile/" "$GIT_WORK_TREE"

  # make sure the current user owns all dotfiles
  for file in $(ls -1A "$PROFILE_DIR/$profile/") ; do
    chown -R $(whoami) "$GIT_WORK_TREE/$file"
  done

  # Once the new files have been added to the home
  # directory, put them under version control.That
  # way, the next time the profile is used, the
  # branch can be checked out and the files don't
  # need to be copied over again.
  quietly "git_add_profile_contents \"$profile\""
  quietly "git_commit_push \"$profile\""
}

COMMAND=$1
shift

if [ $COMMAND != 'uninstall' ] ; then
  quietly "git_init_all"
fi

case $COMMAND in
  --help|-h|usage)
    usage
    ;;
  help)
    help "$@"
    ;;
  list)
    list
    ;;
  restore)
    restore
    ;;
  uninstall)
    uninstall "$@"
    ;;
  use)
    use "$@"
    ;;
  version|--version)
    echo $VERSION
    ;;
  *)
    echoerr 'Invalid command'
    exit 1
    ;;
esac

exit 0
